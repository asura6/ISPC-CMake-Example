cmake_minimum_required(VERSION 3.20.2)
project(Ispc_tutorial)

# compile ISPC sources
if (MSVC)
    add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/simple.o ${PROJECT_BINARY_DIR}/include/simple.h
                        COMMAND E:/tutorials/ISPC/ispc-v1.15.0-windows/bin/ispc.exe --target=avx2 --target-os=windows --arch=x86-64 ${CMAKE_CURRENT_SOURCE_DIR}/simple.ispc --header-outfile=${PROJECT_BINARY_DIR}/include/simple.h -o ${PROJECT_BINARY_DIR}/simple.o
                        DEPENDS simple.ispc
    )
endif (MSVC)

if (UNIX)
    add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/simple.o ${PROJECT_BINARY_DIR}/include/simple.h
                        COMMAND ispc --target=avx2 --arch=x86-64 ${CMAKE_CURRENT_SOURCE_DIR}/simple.ispc --header-outfile=${PROJECT_BINARY_DIR}/include/simple.h -o ${PROJECT_BINARY_DIR}/simple.o
                        DEPENDS simple.ispc
    )
endif (UNIX)
# Make a library from the results of the ispc compilation
add_library(ispcLibrary
        STATIC
        simple.o)
# Set the linker language to C so the linker knows how to link
SET_TARGET_PROPERTIES(
    ispcLibrary
    PROPERTIES
    LINKER_LANGUAGE C 
)

# Add the main program exectuable
add_executable(main)
target_sources(main PRIVATE main.cpp)
add_dependencies(main ispcLibrary) # Needed as dependency as the header file is generated by ISPC
target_include_directories(main PRIVATE ${PROJECT_BINARY_DIR}/include)

# Now create main by linking with the ispc library
target_link_libraries(
    main 
    ispcLibrary
)